# -*- coding: utf-8 -*-

from flask import Flask
import threading
import telebot
import requests
import io
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
logging.basicConfig(level=logging.INFO)

# –í–∞—à —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
TOKEN = '7367857619:AAGWyDbNaOprb7prmgGGoOgNE6Tzh-hGF7s'
BASE_URL = 'https://server-golosov.org/diya/'  # –ë–∞–∑–æ–≤—ã–π URL –≤–∞—à–µ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞
ADMIN_USER_ID = 294413797
bot = telebot.TeleBot(TOKEN)

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user_data = {}

# –ú–∞–ø–ø–∏–Ω–≥ –ø–æ–ª–µ–π (–æ—Å—Ç–∞–≤–ª–µ–Ω –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
field_mapping = {
    "üìù –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –§–ò–û": "fio",
    "üìù –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –§–ò–û (EN)": "fio_en",
    "üìÖ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è": "birth",
    "üîç –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –†–ù–û–ö–ü–ü": "rnokpp",
    "üìù –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–º–µ—Ä –ø–∞—Å–ø–æ—Ä—Ç–∞": "pass_number",
    "üìÖ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞—Ç—É –≤—ã–¥–∞—á–∏ –ø–∞—Å–ø–æ—Ä—Ç–∞": "date_give",
    "üìÖ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–∞—Å–ø–æ—Ä—Ç–∞": "date_out",
    "üè¢ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –æ—Ä–≥–∞–Ω –≤—ã–¥–∞—á–∏ –ø–∞—Å–ø–æ—Ä—Ç–∞": "organ",
    "üîç –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –£–ó–ù–†": "uznr",
    "üåê –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–ø–∏—Å–∫—É": "legalAdress",
    "üìÖ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞—Ç—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏": "registeredOn",
    "‚ôÇÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª": "sex",
    "‚ôÇÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª (EN)": "sex_en",
    "üè† –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –º–µ—Å—Ç–æ —Ä–æ–∂–¥–µ–Ω–∏—è": "live",
    "üí≥ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –±–∞–Ω–∫–æ–≤—Å–∫–∏–π –∞–¥—Ä–µ—Å (–ï–î–æ–∫—É–º–µ–Ω—Ç)": "bank_adress",
    "üìù –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–º–µ—Ä –ø—Ä–∞–≤": "prava_number",
    "üìÖ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞—Ç—É –≤—ã–¥–∞—á–∏ –ø—Ä–∞–≤": "prava_date_give",
    "üìÖ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø—Ä–∞–≤": "prava_date_out",
    "‚úÖ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–∞—Ç—É—Å –ø—Ä–∞–≤": "prava_status",
    "üè¢ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –æ—Ä–≥–∞–Ω –≤—ã–¥–∞—á–∏ –ø—Ä–∞–≤": "pravaOrgan",
    "üöó –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø—Ä–∞–≤": "rights_categories",
    "üìù –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–º–µ—Ä —Å—Ç—É–¥–µ–Ω—á–µ—Å–∫–æ–≥–æ": "student_number",
    "üìÖ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞—Ç—É –≤—ã–¥–∞—á–∏ —Å—Ç—É–¥–µ–Ω—á–µ—Å–∫–æ–≥–æ": "student_date_give",
    "üìÖ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è —Å—Ç—É–¥–µ–Ω—á–µ—Å–∫–æ–≥–æ": "student_date_out",
    "üìö –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ñ–æ—Ä–º—É –æ–±—É—á–µ–Ω–∏—è": "form",
    "‚úÖ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–∞—Ç—É—Å —Å—Ç—É–¥–µ–Ω—á–µ—Å–∫–æ–≥–æ": "study_status",
    "üè´ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç": "university",
    "üè¢ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ñ–∞–∫—É–ª—å—Ç–µ—Ç": "fakultet",
    "üìù –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–º–µ—Ä –∑–∞–≥—Ä–∞–Ω–ø–∞—Å–ø–æ—Ä—Ç–∞": "zagran_number",
    "‚úÖ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–≥—Ä–∞–Ω–ø–∞—Å–ø–æ—Ä—Ç–∞": "zagran_status",
    "üìù –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–µ–ø–µ–Ω—å –¥–∏–ø–ª–æ–º–∞": "stepen_dip",
    "üè´ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç –¥–∏–ø–ª–æ–º–∞": "univer_dip",
    "üìÖ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞—Ç—É –≤—ã–¥–∞—á–∏ –¥–∏–ø–ª–æ–º–∞": "dayout_dip",
    "üéì –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å –¥–∏–ø–ª–æ–º–∞": "special_dip",
    "üìù –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–º–µ—Ä –¥–∏–ø–ª–æ–º–∞": "number_dip",
    "‚úÖ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–∞—Ç—É—Å –¥–∏–ø–ª–æ–º–∞": "status_dip",
}

# –ü—Ä–∏–º–µ—Ä—ã –∑–Ω–∞—á–µ–Ω–∏–π (–æ—Å—Ç–∞–≤–ª–µ–Ω—ã –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
field_examples = {
    "üìù –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –§–ò–û": "–Ü–≤–∞–Ω–æ–≤ –Ü–≤–∞–Ω –Ü–≤–∞–Ω–æ–≤–∏—á",
    "üìù –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –§–ò–û (EN)": "Ivanov Ivan Ivanovich",
    "üìÖ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è": "01.01.1990",
    "üîç –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –†–ù–û–ö–ü–ü": "11 —Å–∏–º–≤–æ–ª–æ–≤",
    "üìù –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–º–µ—Ä –ø–∞—Å–ø–æ—Ä—Ç–∞": "–ê–ë123456",
    "üìÖ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞—Ç—É –≤—ã–¥–∞—á–∏ –ø–∞—Å–ø–æ—Ä—Ç–∞": "15.03.2015",
    "üìÖ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–∞—Å–ø–æ—Ä—Ç–∞": "15.03.2025",
    "üè¢ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –æ—Ä–≥–∞–Ω –≤—ã–¥–∞—á–∏ –ø–∞—Å–ø–æ—Ä—Ç–∞": "–û—Ç–¥–µ–ª–µ–Ω–∏–µ –£–§–ú–° ‚Ññ123",
    "‚ôÇÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª": "–ß",
    "‚ôÇÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª (EN)": "M",
    "üìù –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–º–µ—Ä –ø—Ä–∞–≤": "–í–£1234567",
    "üöó –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø—Ä–∞–≤": "B, C",
    "üìù –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–º–µ—Ä —Å—Ç—É–¥–µ–Ω—á–µ—Å–∫–æ–≥–æ": "–°–¢123456",
    "üìö –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ñ–æ—Ä–º—É –æ–±—É—á–µ–Ω–∏—è": "–û—á–Ω–∞",
    "üìù –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–º–µ—Ä –∑–∞–≥—Ä–∞–Ω–ø–∞—Å–ø–æ—Ä—Ç–∞": "12 3456789",
    "üìù –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–µ–ø–µ–Ω—å –¥–∏–ø–ª–æ–º–∞": "–ë–∞–∫–∞–ª–∞–≤—Ä",
    "üéì –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å –¥–∏–ø–ª–æ–º–∞": "–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞",
}


# –°—Ç–∞—Ä—Ç–æ–≤–æ–µ –º–µ–Ω—é
def get_start_menu():
    markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(telebot.types.KeyboardButton("‚ùì FAQ"))
    markup.add(telebot.types.KeyboardButton("üìñ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ —É—Å—Ç–∞–Ω–æ–≤–∫–µ"))
    markup.add(telebot.types.KeyboardButton("üìã –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ"))
    return markup


# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
def get_main_menu(user_id):
    markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(telebot.types.KeyboardButton("üìã –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–∞—Å–ø–æ—Ä—Ç"))
    markup.add(telebot.types.KeyboardButton("üöó –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∞–≤–∞"))
    markup.add(telebot.types.KeyboardButton("üéì –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—Ç—É–¥–µ–Ω—á–µ—Å–∫–∏–π"))
    markup.add(telebot.types.KeyboardButton("üåç –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–≥—Ä–∞–Ω–ø–∞—Å–ø–æ—Ä—Ç"))
    markup.add(telebot.types.KeyboardButton("üéì –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∏–ø–ª–æ–º"))
    markup.add(telebot.types.KeyboardButton("üì∑ –ó–∞–≥—Ä—É–∑–∏—Ç—å –æ–±—â—É—é —Ñ–æ—Ç–∫—É"))
    if user_id == ADMIN_USER_ID:
        markup.add(telebot.types.KeyboardButton("üõ† –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"))
    markup.add(telebot.types.KeyboardButton("üîó –ü–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É"))
    markup.add(telebot.types.KeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥"))
    return markup


# –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å —Å –Ω–æ–≤–æ–π –∫–Ω–æ–ø–∫–æ–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
def get_admin_panel():
    markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(telebot.types.KeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å–∞–π—Ç"))
    markup.add(telebot.types.KeyboardButton("üì© –°–æ–∑–¥–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É"))
    markup.add(telebot.types.KeyboardButton("‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è"))
    return markup


# –û—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –º–µ–Ω—é (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
def get_passport_menu(user_id):
    markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(telebot.types.KeyboardButton("üìù –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –§–ò–û"))
    markup.add(telebot.types.KeyboardButton("üìù –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –§–ò–û (EN)"))
    markup.add(telebot.types.KeyboardButton("üìÖ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è"))
    markup.add(telebot.types.KeyboardButton("üîç –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –†–ù–û–ö–ü–ü"))
    markup.add(telebot.types.KeyboardButton("üìù –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–º–µ—Ä –ø–∞—Å–ø–æ—Ä—Ç–∞"))
    markup.add(
        telebot.types.KeyboardButton("üìÖ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞—Ç—É –≤—ã–¥–∞—á–∏ –ø–∞—Å–ø–æ—Ä—Ç–∞"))
    markup.add(
        telebot.types.KeyboardButton(
            "üìÖ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–∞—Å–ø–æ—Ä—Ç–∞"))
    markup.add(
        telebot.types.KeyboardButton("üè¢ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –æ—Ä–≥–∞–Ω –≤—ã–¥–∞—á–∏ –ø–∞—Å–ø–æ—Ä—Ç–∞"))
    markup.add(telebot.types.KeyboardButton("üîç –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –£–ó–ù–†"))
    markup.add(telebot.types.KeyboardButton("üåê –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–ø–∏—Å–∫—É"))
    markup.add(
        telebot.types.KeyboardButton("üìÖ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞—Ç—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"))
    markup.add(telebot.types.KeyboardButton("‚ôÇÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª"))
    markup.add(telebot.types.KeyboardButton("‚ôÇÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª (EN)"))
    markup.add(telebot.types.KeyboardButton("üè† –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –º–µ—Å—Ç–æ —Ä–æ–∂–¥–µ–Ω–∏—è"))
    markup.add(
        telebot.types.KeyboardButton(
            "üí≥ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –±–∞–Ω–∫–æ–≤—Å–∫–∏–π –∞–¥—Ä–µ—Å (–ï–î–æ–∫—É–º–µ–Ω—Ç)"))
    markup.add(telebot.types.KeyboardButton("‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è"))
    return markup


def get_prava_menu(user_id):
    markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(telebot.types.KeyboardButton("üìù –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–º–µ—Ä –ø—Ä–∞–≤"))
    markup.add(
        telebot.types.KeyboardButton("üìÖ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞—Ç—É –≤—ã–¥–∞—á–∏ –ø—Ä–∞–≤"))
    markup.add(
        telebot.types.KeyboardButton("üìÖ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø—Ä–∞–≤"))
    markup.add(telebot.types.KeyboardButton("‚úÖ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–∞—Ç—É—Å –ø—Ä–∞–≤"))
    markup.add(
        telebot.types.KeyboardButton("üè¢ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –æ—Ä–≥–∞–Ω –≤—ã–¥–∞—á–∏ –ø—Ä–∞–≤"))
    markup.add(telebot.types.KeyboardButton("üöó –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø—Ä–∞–≤"))
    markup.add(telebot.types.KeyboardButton("üîÑ –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∞–≤–∞"))
    markup.add(telebot.types.KeyboardButton("üîÑ –°–∫—Ä—ã—Ç—å –ø—Ä–∞–≤–∞"))
    markup.add(telebot.types.KeyboardButton("‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è"))
    return markup


def get_student_menu(user_id):
    markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(
        telebot.types.KeyboardButton("üìù –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–º–µ—Ä —Å—Ç—É–¥–µ–Ω—á–µ—Å–∫–æ–≥–æ"))
    markup.add(
        telebot.types.KeyboardButton(
            "üìÖ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞—Ç—É –≤—ã–¥–∞—á–∏ —Å—Ç—É–¥–µ–Ω—á–µ—Å–∫–æ–≥–æ"))
    markup.add(
        telebot.types.KeyboardButton(
            "üìÖ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è —Å—Ç—É–¥–µ–Ω—á–µ—Å–∫–æ–≥–æ"))
    markup.add(telebot.types.KeyboardButton("üìö –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ñ–æ—Ä–º—É –æ–±—É—á–µ–Ω–∏—è"))
    markup.add(
        telebot.types.KeyboardButton("‚úÖ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–∞—Ç—É—Å —Å—Ç—É–¥–µ–Ω—á–µ—Å–∫–æ–≥–æ"))
    markup.add(telebot.types.KeyboardButton("üè´ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç"))
    markup.add(telebot.types.KeyboardButton("üè¢ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ñ–∞–∫—É–ª—å—Ç–µ—Ç"))
    markup.add(telebot.types.KeyboardButton("üîÑ –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç—É–¥–µ–Ω—á–µ—Å–∫–∏–π"))
    markup.add(telebot.types.KeyboardButton("üîÑ –°–∫—Ä—ã—Ç—å —Å—Ç—É–¥–µ–Ω—á–µ—Å–∫–∏–π"))
    markup.add(telebot.types.KeyboardButton("‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è"))
    return markup


def get_zagran_menu(user_id):
    markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(
        telebot.types.KeyboardButton("üìù –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–º–µ—Ä –∑–∞–≥—Ä–∞–Ω–ø–∞—Å–ø–æ—Ä—Ç–∞"))
    markup.add(
        telebot.types.KeyboardButton("‚úÖ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–≥—Ä–∞–Ω–ø–∞—Å–ø–æ—Ä—Ç–∞"))
    markup.add(telebot.types.KeyboardButton("üîÑ –ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–≥—Ä–∞–Ω–ø–∞—Å–ø–æ—Ä—Ç"))
    markup.add(telebot.types.KeyboardButton("üîÑ –°–∫—Ä—ã—Ç—å –∑–∞–≥—Ä–∞–Ω–ø–∞—Å–ø–æ—Ä—Ç"))
    markup.add(telebot.types.KeyboardButton("‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è"))
    return markup


def get_diploma_menu(user_id):
    markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(telebot.types.KeyboardButton("üìù –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–µ–ø–µ–Ω—å –¥–∏–ø–ª–æ–º–∞"))
    markup.add(
        telebot.types.KeyboardButton("üè´ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç –¥–∏–ø–ª–æ–º–∞"))
    markup.add(
        telebot.types.KeyboardButton("üìÖ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞—Ç—É –≤—ã–¥–∞—á–∏ –¥–∏–ø–ª–æ–º–∞"))
    markup.add(
        telebot.types.KeyboardButton("üéì –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å –¥–∏–ø–ª–æ–º–∞"))
    markup.add(telebot.types.KeyboardButton("üìù –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–º–µ—Ä –¥–∏–ø–ª–æ–º–∞"))
    markup.add(telebot.types.KeyboardButton("‚úÖ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–∞—Ç—É—Å –¥–∏–ø–ª–æ–º–∞"))
    markup.add(telebot.types.KeyboardButton("üîÑ –ü–æ–∫–∞–∑–∞—Ç—å –¥–∏–ø–ª–æ–º"))
    markup.add(telebot.types.KeyboardButton("üîÑ –°–∫—Ä—ã—Ç—å –¥–∏–ø–ª–æ–º"))
    markup.add(telebot.types.KeyboardButton("‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è"))
    return markup


# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
def update_document_status(user_id, field, value):
    response = requests.post(f"{BASE_URL}api/update.php",
                             data={
                                 'user_id': user_id,
                                 'field': field,
                                 'value': value
                             })
    return response.status_code == 200 and response.json().get(
        'status') == 'success'


def show_document(message, field, document_name, menu_callback):
    user_id = message.from_user.id
    if update_document_status(user_id, field, 'True'):
        bot.send_message(
            message.chat.id,
            f"{document_name} –ø–æ–∫–∞–∑–∞–Ω! –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ üéâ",
            reply_markup=menu_callback(user_id))
    else:
        bot.send_message(message.chat.id,
                         "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–µ—Ä–≤–µ—Ä.")


def hide_document(message, field, document_name, menu_callback):
    user_id = message.from_user.id
    if update_document_status(user_id, field, 'False'):
        bot.send_message(message.chat.id,
                         f"{document_name} —Å–∫—Ä—ã—Ç! –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ üéâ",
                         reply_markup=menu_callback(user_id))
    else:
        bot.send_message(message.chat.id,
                         "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–µ—Ä–≤–µ—Ä.")


# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
def is_registered(user_id):
    response = requests.get(
        f"{BASE_URL}api/get_unique_id.php?user_id={user_id}")
    return response.text.strip() != "not_found"


# –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–∞–ø–æ–∫
def get_all_users():
    response = requests.get(f"{BASE_URL}api/get_all_users.php")
    if response.status_code == 200:
        return response.json().get('users', [])
    return []


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
@bot.message_handler(commands=['start'])
def start(message):
    user_id = message.from_user.id
    link = f"{BASE_URL}data/{user_id}/"
    if is_registered(user_id):
        bot.send_message(
            message.chat.id,
            f"–í—ã —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–∏—Ä–æ–≤–∞–Ω—ã! üéâ –í–∞—à–∞ —É–Ω–∏–∫–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞: {link}")
    else:
        response = requests.post(f"{BASE_URL}api/register.php",
                                 data={
                                     'user_id': user_id,
                                     'unique_id': str(user_id)
                                 })
        result = response.json()
        if result['status'] == 'success':
            bot.send_message(
                message.chat.id,
                f"–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ! üéâ –í–∞—à–∞ —É–Ω–∏–∫–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞: {link}"
            )
        else:
            bot.send_message(
                message.chat.id,
                f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: {result.get('message', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}"
            )
    bot.send_message(message.chat.id,
                     "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                     reply_markup=get_start_menu())


@bot.message_handler(func=lambda message: message.text == "‚ùì FAQ")
def faq(message):
    bot.send_message(message.chat.id,
                     "üìö FAQ: https://telegra.ph/FAQ-Fejk-D%D1%96ya-11-07",
                     reply_markup=get_start_menu())


@bot.message_handler(
    func=lambda message: message.text == "üìñ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ —É—Å—Ç–∞–Ω–æ–≤–∫–µ")
def instructions(message):
    bot.send_message(
        message.chat.id,
        "üìñ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ —É—Å—Ç–∞–Ω–æ–≤–∫–µ: https://telegra.ph/Vstanovlennya-Fejk-D%D1%96i-11-07",
        reply_markup=get_start_menu())


@bot.message_handler(func=lambda message: message.text == "üìã –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ")
def app_menu(message):
    user_id = message.from_user.id
    bot.send_message(message.chat.id,
                     "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:",
                     reply_markup=get_main_menu(user_id))


@bot.message_handler(
    func=lambda message: message.text == "üìã –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–∞—Å–ø–æ—Ä—Ç")
def edit_passport(message):
    user_id = message.from_user.id
    bot.send_message(message.chat.id,
                     "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Å–ø–æ—Ä—Ç–∞:",
                     reply_markup=get_passport_menu(user_id))


@bot.message_handler(
    func=lambda message: message.text == "üöó –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∞–≤–∞")
def edit_prava(message):
    user_id = message.from_user.id
    bot.send_message(message.chat.id,
                     "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∞–≤:",
                     reply_markup=get_prava_menu(user_id))


@bot.message_handler(
    func=lambda message: message.text == "üéì –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—Ç—É–¥–µ–Ω—á–µ—Å–∫–∏–π")
def edit_student(message):
    user_id = message.from_user.id
    bot.send_message(message.chat.id,
                     "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—É–¥–µ–Ω—á–µ—Å–∫–æ–≥–æ:",
                     reply_markup=get_student_menu(user_id))


@bot.message_handler(
    func=lambda message: message.text == "üåç –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–≥—Ä–∞–Ω–ø–∞—Å–ø–æ—Ä—Ç")
def edit_zagran(message):
    user_id = message.from_user.id
    bot.send_message(message.chat.id,
                     "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≥—Ä–∞–Ω–ø–∞—Å–ø–æ—Ä—Ç–∞:",
                     reply_markup=get_zagran_menu(user_id))


@bot.message_handler(
    func=lambda message: message.text == "üéì –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∏–ø–ª–æ–º")
def edit_diploma(message):
    user_id = message.from_user.id
    bot.send_message(message.chat.id,
                     "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∏–ø–ª–æ–º–∞:",
                     reply_markup=get_diploma_menu(user_id))


@bot.message_handler(
    func=lambda message: message.text == "üì∑ –ó–∞–≥—Ä—É–∑–∏—Ç—å –æ–±—â—É—é —Ñ–æ—Ç–∫—É")
def upload_photo_main(message):
    user_id = message.from_user.id
    user_data[user_id] = {'state': 'awaiting_photo'}
    bot.send_message(message.chat.id,
                     "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –æ–±—â—É—é —Ñ–æ—Ç–∫—É –¥–ª—è –≤—Å–µ—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤.")


@bot.message_handler(func=lambda message: message.text == "üîó –ü–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É")
def get_link_main(message):
    user_id = message.from_user.id
    link = f"{BASE_URL}data/{user_id}/"
    bot.send_message(message.chat.id,
                     "üéâ –í–∞—à–∞ —É–Ω–∏–∫–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞: " + link,
                     reply_markup=get_main_menu(user_id))


@bot.message_handler(
    func=lambda message: message.text in ["‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è", "‚¨ÖÔ∏è –ù–∞–∑–∞–¥"])
def back(message):
    user_id = message.from_user.id
    if user_id in user_data:
        del user_data[user_id]
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ –º–µ–Ω—é
    bot.send_message(message.chat.id,
                     "–í–æ–∑–≤—Ä–∞—Ç –≤ —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ –º–µ–Ω—é.",
                     reply_markup=get_start_menu())


@bot.message_handler(func=lambda message: "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å" in message.text)
def edit_field(message):
    fieldo = message.text
    field = field_mapping.get(fieldo, None)
    if field:
        user_id = message.from_user.id
        example = field_examples.get(fieldo, "–Ω–µ—Ç –ø—Ä–∏–º–µ—Ä–∞")
        user_data[user_id] = {
            'field': field,
            'state': 'awaiting_input',
            'fieldo': fieldo
        }
        bot.send_message(
            message.chat.id,
            f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è {fieldo} (–ø—Ä–∏–º–µ—Ä: {example}):")
    else:
        bot.send_message(message.chat.id,
                         "–û—à–∏–±–∫–∞: –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –ø–æ–ª–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.")


@bot.message_handler(func=lambda message: message.text == "üõ† –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å")
def admin_panel(message):
    user_id = message.from_user.id
    if user_id == ADMIN_USER_ID:
        bot.send_message(message.chat.id,
                         "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å!",
                         reply_markup=get_admin_panel())
    else:
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.")


@bot.message_handler(func=lambda message: message.text == "üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å–∞–π—Ç")
def update_site(message):
    user_id = message.from_user.id
    if user_id == ADMIN_USER_ID:
        response = requests.post(f"{BASE_URL}api/update_site.php")
        if response.status_code == 200 and response.json().get(
                'status') == 'success':
            bot.send_message(message.chat.id,
                             "–°–∞–π—Ç —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π!",
                             reply_markup=get_admin_panel())
        else:
            bot.send_message(
                message.chat.id,
                f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–∞–π—Ç–∞: {response.json().get('message', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}"
            )
    else:
        bot.send_message(message.chat.id,
                         "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")


@bot.message_handler(func=lambda message: message.text == "üì© –°–æ–∑–¥–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É")
def start_broadcast(message):
    user_id = message.from_user.id
    if user_id == ADMIN_USER_ID:
        user_data[user_id] = {'state': 'awaiting_broadcast_message'}
        bot.send_message(message.chat.id,
                         "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º:")
    else:
        bot.send_message(message.chat.id,
                         "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")


@bot.message_handler(func=lambda message: message.text == "üîÑ –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∞–≤–∞")
def show_prava(message):
    show_document(message, 'prava_status', "–ü—Ä–∞–≤–∞", get_prava_menu)


@bot.message_handler(func=lambda message: message.text == "üîÑ –°–∫—Ä—ã—Ç—å –ø—Ä–∞–≤–∞")
def hide_prava(message):
    hide_document(message, 'prava_status', "–ü—Ä–∞–≤–∞", get_prava_menu)


@bot.message_handler(
    func=lambda message: message.text == "üîÑ –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç—É–¥–µ–Ω—á–µ—Å–∫–∏–π")
def show_student(message):
    show_document(message, 'study_status', "–°—Ç—É–¥–µ–Ω—á–µ—Å–∫–∏–π –±–∏–ª–µ—Ç",
                  get_student_menu)


@bot.message_handler(
    func=lambda message: message.text == "üîÑ –°–∫—Ä—ã—Ç—å —Å—Ç—É–¥–µ–Ω—á–µ—Å–∫–∏–π")
def hide_student(message):
    hide_document(message, 'study_status', "–°—Ç—É–¥–µ–Ω—á–µ—Å–∫–∏–π –±–∏–ª–µ—Ç",
                  get_student_menu)


@bot.message_handler(
    func=lambda message: message.text == "üîÑ –ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–≥—Ä–∞–Ω–ø–∞—Å–ø–æ—Ä—Ç")
def show_zagran(message):
    show_document(message, 'zagran_status', "–ó–∞–≥—Ä–∞–Ω–ø–∞—Å–ø–æ—Ä—Ç", get_zagran_menu)


@bot.message_handler(
    func=lambda message: message.text == "üîÑ –°–∫—Ä—ã—Ç—å –∑–∞–≥—Ä–∞–Ω–ø–∞—Å–ø–æ—Ä—Ç")
def hide_zagran(message):
    hide_document(message, 'zagran_status', "–ó–∞–≥—Ä–∞–Ω–ø–∞—Å–ø–æ—Ä—Ç", get_zagran_menu)


@bot.message_handler(func=lambda message: message.text == "üîÑ –ü–æ–∫–∞–∑–∞—Ç—å –¥–∏–ø–ª–æ–º")
def show_diploma(message):
    show_document(message, 'status_dip', "–î–∏–ø–ª–æ–º", get_diploma_menu)


@bot.message_handler(func=lambda message: message.text == "üîÑ –°–∫—Ä—ã—Ç—å –¥–∏–ø–ª–æ–º")
def hide_diploma(message):
    hide_document(message, 'status_dip', "–î–∏–ø–ª–æ–º", get_diploma_menu)


@bot.message_handler(content_types=['text'])
def handle_text(message):
    user_id = message.from_user.id
    if user_id in user_data and user_data[user_id].get(
            'state') == 'awaiting_broadcast_message':
        if user_id == ADMIN_USER_ID:
            broadcast_message = message.text
            users = get_all_users()
            if not users:
                bot.send_message(
                    message.chat.id,
                    "–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.",
                    reply_markup=get_admin_panel())
                del user_data[user_id]
                return
            success_count = 0
            for user in users:
                try:
                    bot.send_message(int(user['user_id']), broadcast_message)
                    success_count += 1
                except Exception as e:
                    logging.error(
                        f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user['user_id']}: {str(e)}"
                    )
            bot.send_message(
                message.chat.id,
                f"–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {success_count} –∏–∑ {len(users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.",
                reply_markup=get_admin_panel())
            del user_data[user_id]
    elif user_id in user_data and user_data[user_id].get(
            'state') == 'awaiting_input':
        field = user_data[user_id].get('field')
        fieldo = user_data[user_id].get('fieldo')
        value = message.text
        if not field:
            bot.send_message(message.chat.id,
                             "–û—à–∏–±–∫–∞: –ø–æ–ª–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ.")
            return
        response = requests.post(f"{BASE_URL}api/update.php",
                                 data={
                                     'user_id': user_id,
                                     'field': field,
                                     'value': value
                                 })
        if response.status_code == 200 and response.json().get(
                'status') == 'success':
            del user_data[user_id]
            bot.send_message(
                message.chat.id,
                f"–î–∞–Ω–Ω—ã–µ –¥–ª—è {fieldo} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã! –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ üéâ",
                reply_markup=get_main_menu(user_id))
        else:
            bot.send_message(
                message.chat.id,
                "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–µ—Ä–≤–µ—Ä.")


@bot.message_handler(content_types=['photo'])
def handle_photo(message):
    user_id = message.from_user.id
    if user_id in user_data and user_data[user_id].get(
            'state') == 'awaiting_photo':
        try:
            photo = message.photo[-1]  # –ë–µ—Ä–µ–º —Ñ–æ—Ç–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞
            file_info = bot.get_file(photo.file_id)
            downloaded_file = bot.download_file(file_info.file_path)
            files = {'photo': ('photo.jpg', downloaded_file, 'image/jpeg')}
            data = {'user_id': user_id}
            logging.info(f"–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–æ—Ç–æ –¥–ª—è user_id: {user_id}")
            response = requests.post(f"{BASE_URL}api/upload_photo.php",
                                     files=files,
                                     data=data)
            if response.status_code == 200 and response.json().get(
                    'status') == 'success':
                del user_data[user_id]
                bot.send_message(
                    message.chat.id,
                    "–§–æ—Ç–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ! –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω—ã! –ü–ï–†–ï–£–°–¢–ê–ù–û–í–ò–¢–ï –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ üì∑",
                    reply_markup=get_main_menu(user_id))
            else:
                bot.send_message(message.chat.id,
                                 f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–æ—Ç–æ: {response.text}")
        except Exception as e:
            bot.send_message(message.chat.id,
                             f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ: {str(e)}")
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–æ—Ç–æ: {str(e)}")
    else:
        bot.send_message(message.chat.id,
                         "–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ 'üì∑ –ó–∞–≥—Ä—É–∑–∏—Ç—å –æ–±—â—É—é —Ñ–æ—Ç–∫—É'.")


# Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
app = Flask(__name__)


@app.route('/')
def home():
    return "Bot is running!"


def run_bot():
    while True:
        try:
            logging.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
            bot.polling(none_stop=True, interval=0)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –≤ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞: {str(e)}")
            bot.stop_polling()
            threading.Event().wait(5)  # –ü–∞—É–∑–∞ –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–º


if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    bot_thread = threading.Thread(target=run_bot)
    bot_thread.daemon = True  # –ü–æ—Ç–æ–∫ –∑–∞–≤–µ—Ä—à–∏—Ç—Å—è –≤–º–µ—Å—Ç–µ —Å –æ—Å–Ω–æ–≤–Ω—ã–º –ø—Ä–æ—Ü–µ—Å—Å–æ–º
    bot_thread.start()
    # –ó–∞–ø—É—Å–∫–∞–µ–º Flask
    app.run(host='0.0.0.0', port=8080)
